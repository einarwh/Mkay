{
  function cc(it){
    var clone=[];
    for(var p in it){
        clone.push(it[p]);
    }
    return clone.join("");
  }

  function all(it) {
    return it.map(function(a) {return cc(a)}).join("");
  }

  function asInt(ss) {
    parseInt(ss.join(""), 10)
  }
}

start
  = _? exp:expression* _? { return exp; }


expression
  = list / atom

nsq 
  = head:expression _ tail:nsq { tail.unshift(head); return tail; } / onesq

onesq
  = exp:expression {return [exp]; } / emptysq

emptysq
  = _? { return []; }

list 
  = '(' _? seq:nsq _? ')' { return seq; }

atom 
  = identifier / bool / float / integer / string / datetime

integer "integer"
  = digits:[0-9]+ { 
  var v = parseInt(digits.join(""), 10); 
  return { type: "integer", value: v };
}

bool
  = v: (true / false) { 
  return { type: "bool", value: v }; 
}

true
  = '#t' { return true; }

false
  = '#f' { return false; }
 
float
  = sign:('+' / '-')? int:[0-9]+ dec:('.' [0-9]+) {
  var s = int.join("") + "." + dec[1].join("");
  var fl = parseFloat(s);
  if (sign === '-') { fl = -fl; }
  return {
    type: "float",
    value: fl
  };
} 

datetime 
  = '{' dd:('3' [0-1] / [1-2] [0-9] / '0'? [1-9]) '.' 
        mm:('1' [0-2] / '0'? [1-9]) '.'
        yyyy: ([0-9] [0-9] [0-9] [0-9]) '}' 
  { 
    var days = parseInt(dd.join(""), 10);
    var month = parseInt(mm.join(""), 10);
    var year = parseInt(yyyy.join(""), 10);
    return { 
       type: "datetime",
       value: new Date(year, month, days)
    }; 
  }
 
string
  = '"' s:([^"\\] / "\\" . )* '"' { 
  return {
    type: "string",
    value: all(s)
  }
}

identifier
  = id:([a-zA-Z\=\*:] [a-zA-Z0-9_\=\*-:]*) 
{ 
  return { 
   type: "name",
   value: all(id) 
  }
}

_
  = [\s\n\t ]+ { return ""; }
