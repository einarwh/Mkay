{
  function cc(it){
    var clone=[];
    for(var p in it){
        clone.push(it[p]);
    }
    return clone.join("");
  }

  function all(it) {
    return it.map(function(a) {return cc(a)}).join("");
  }

  function asInt(ss) {
    return parseInt(ss.join(""), 10);
  }
}

start
  = _? exp:(list / formbody) _? { return exp; }

expression
  = list / atom

nsq 
  = head:expression _ tail:nsq { 
    tail.unshift(head); 
    return tail; 
  } 
  / onesq

onesq
  = exp:expression {return [exp]; } / emptysq

emptysq
  = _? { return []; }

list 
  = '(' _? seq:formbody _? ')' { 
  return seq;
}

formbody
  = seq:nsq { 
  var head = seq.shift();
  return {
    type: "call",
    value: head.value,
    operands: seq
  };
}

atom 
  = identifier / self / comparison / arith / bool / float / integer / string / datetime

self
  = self:'.' {
  return { type: "name", value: self }
}

integer "integer"
  = digits:[0-9]+ { 
  var v = asInt(digits); 
  return { type: "integer", value: v };
}

bool
  = v: (true / false) { 
  return { type: "bool", value: v }; 
}

true
  = '#t' { return true; }

false
  = '#f' { return false; }

comparison
  = op:('<' / '<=' / '==' / '!=' / '>=' / '>') { 
  return { type: "name", value: op };
}

arith
  = op:('+' / '-' / '*' / '/') { 
  return { type: "name", value: op };
}
 
float
  = sign:('+' / '-')? int:[0-9]+ dec:('.' [0-9]+) {
  var s = int.join("") + "." + dec[1].join("");
  var fl = parseFloat(s);
  if (sign === '-') { fl = -fl; }
  return {
    type: "float",
    value: fl
  };
} 

datetime 
  = '{' dd:('3' [0-1] / [1-2] [0-9] / '0'? [1-9]) '.' 
        mm:('1' [0-2] / '0'? [1-9]) '.'
        yyyy: ([0-9] [0-9] [0-9] [0-9]) '}' 
  { 
    var days = asInt(dd);
    var month = asInt(mm);
    var year = asInt(yyyy);
    return { 
       type: "datetime",
       value: new Date(year, month, days)
    }; 
  }
 
string
  = '"' s:([^"\\] / "\\" . )* '"' { 
  return {
    type: "string",
    value: all(s)
  }
}

identifier
  = id:([a-zA-Z\=\*:] [a-zA-Z0-9_\=\*-:]*) 
{ 
  return { 
   type: "name",
   value: all(id) 
  }
}

_
  = [\s\n\t ]+ { return ""; }
